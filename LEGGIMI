Separation = quanto un gruppo di boids devono essere distanziati l'uno dall'altro
Allignment = boid cambia direzione per allinearsi alla traiettoria degli altri
Cohesion = boid cambia direzione per muoversi verso baricentro degli altri

Simulation -> MAIN (JUST CHANGE A LITTLE)
Simulator -> MANAGE SIMULATION (TO MODIFY)
Panel -> DO NOT TOUCH
View -> ADD START/STOP BUTTON
             ADD INPUT BOX TO INIT nBOIDS
Model -> GENERATE RANDOM POS & VEL AND INIT BOIDS
Boid -> UPDATE & CALC SEPARATION, ALIGNMENT, COEHSION


In una versione precedentemente implementata, 
si poteva usare il ReentrantLock insieme alla Condition senza sfruttare il vero meccanismo di blocco (await) ma solo controllando lo stato e facendo sleep brevi (busy waiting).
 In pratica, questo approccio funzionava così:

Ogni thread che voleva attendere un cambiamento nel modello acquisiva il lock e controllava una variabile booleana o uno stato (ad esempio, “è aggiornato?”).
Se la condizione non era verificata, il thread non si bloccava realmente (cioè non veniva messo in attesa dal meccanismo di sincronizzazione), 
ma eseguiva un ciclo che metteva in pausa brevemente il thread (Thread.sleep(…) in un loop) o continuava a ciclare (polling).
Questo approccio richiedeva cicli frequenti per verificare la condizione e generalmente usava un “busy waiting” che consumava CPU,
 perché i thread erano attivi nel controllare continuamente la condizione e dormendo solo per brevi periodi.

 Inoltre, senza una barriera (o con una sincronizzazione meno efficiente) i thread dovevano fare continui controlli manuali su un flag di pausa, comportando anche qui un consumo maggiore di risorse.

Miglioramento con condition.await():

Utilizzando la Condition insieme a await(), il thread si blocca in maniera efficiente 
(ossia il lock viene rilasciato e il thread viene messo in stato di attesa dal sistema operativo) 
fino a quando non viene invocato signal() o signalAll() sull’oggetto Condition. In questo modo:

I thread non effettuano polling attivi (cioè non controllano continuamente la condizione e non fanno sleep brevi in un loop).
Il thread bloccato non consuma cicli CPU, poiché il sistema operativo lo sospende fino all’arrivo del segnale.
Il risveglio avviene solo quando un altro thread, che ha completato un aggiornamento (ad esempio, in updateBoid() che chiama signalAll()), notifica il cambiamento.
Quindi, usando condition.await() nel thread che attende (tipicamente nel thread di coordinamento o rendering) si ottiene un uso migliore delle risorse e un abbassamento del carico CPU complessivo, 
perché i thread non rimangono attivi in attesa di verificare continuamente se il modello è aggiornato,
 ma vengono bloccati in maniera efficiente fino a quando non è il momento di riprendere. 
 Questo si traduce in un'applicazione con prestazioni migliori e una minore latenza dovuta al continuo polling.



 //SCENARIO DI LOCK CONDITION BARRIER

 Di seguito puoi trovare un esempio dettagliato di come interagiscono lock, condition e barrier nel contesto di tre thread (immaginiamo tre worker) per aggiornare il modello e sincronizzarsi:

### Scenario

- **Lock e Condition (isUpdated):**  
  Il lock protegge l'accesso alla lista dei boid e gli aggiornamenti dei parametri 
  (separation, alignment, cohesion). 
  La condition permette a un thread (ad esempio, un thread di rendering o di coordinamento)
   di attendere in modo efficiente fino a quando uno dei worker non notifichi un aggiornamento. 
   In pratica, ogni volta che un worker chiama `updateBoid()`, 
   acquista il lock, aggiorna il boid nella lista e chiama `isUpdated.signalAll()` per svegliare i thread in attesa 
   (ad esempio, il thread di rendering).

- **CyclicBarrier:**  
  La barrier viene utilizzata per sincronizzare i tre worker: 
  ciascun worker esegue il proprio aggiornamento di una serie di boid, poi chiama `barrier.await()`. 
  Il meccanismo della barriera assicura che nessun worker proceda al ciclo successivo finché tutti e tre non hanno completato il loro aggiornamento. 
  Questo garantisce che al termine di ogni ciclo di aggiornamento lo stato globale del modello sia consistente.

### Esempio con 3 Thread

Immaginiamo di avere 3 worker (Thread A, B e C):

1. **Inizio del ciclo di aggiornamento:**
   - I 3 thread entrano nel ciclo `while(true)`.
   - Se la simulazione non è in pausa, ognuno inizia a aggiornare i propri boid.
   
2. **Utilizzo del Lock e della Condition durante l'aggiornamento:**
   - Supponiamo che il Thread A debba aggiornare un boid:
     - Il metodo `updateBoid(int index, Boid newBoid)` viene chiamato.
     - All'interno di questo metodo, A acquisisce il lock:  
       ```java
       lock.lock();
       try {
           boids.set(index, newBoid);
           // Notifica che è stato effettuato un aggiornamento nel modello.
           isUpdated.signalAll();
       } finally {
           lock.unlock();
       }
       ```
     - In questo modo, se il thread di coordinamento (ad esempio, il rendering) era in attesa chiamando `model.waitForUpdate()`, sarà risvegliato.
   
3. **Sincronizzazione con la Barrier:**
   - Dopo che il Thread A (e in modo analogo B e C) ha aggiornato i propri boid, ciascuno chiama:
     ```java
     barrier.await();
     ```
   - La barrier attende finché tutti e tre i thread non arrivano a questo punto. Solo quando il terzo thread chiama `await()` tutti i 3 vengono liberati e possono iniziare il ciclo successivo.
   
4. **Thread di coordinamento (es. Rendering):**
   - Separatamente, possiamo avere un thread (o il thread principale) che esegue:
     ```java
     while (true) {
         try {
             model.waitForUpdate(); // Si blocca finché non arriva una notifica di aggiornamento
             // Procede col rendering: disegna lo stato attuale del modello
             view.update(frameRate);
         } catch (InterruptedException e) {
             Thread.currentThread().interrupt();
         }
     }
     ```
   - Questo thread chiama `waitForUpdate()` che, internamente, esegue:
     ```java
     lock.lock();
     try {
         isUpdated.await(); // Il thread si blocca qui finché uno dei worker non esegue isUpdated.signalAll()
     } finally {
         lock.unlock();
     }
     ```
   - Quando uno dei worker chiama `updateBoid()` dopo aver aggiornato un boid, viene segnalato e il thread di rendering si risveglia per eseguire il disegno.

### Schema riassuntivo (pseudocodice)

```java
// Worker Threads (A, B e C)
public void run() {
    while (true) {
        // Controllo pausa, ecc.
        while (simulator.isPaused()) {
            Thread.sleep(50);
        }
        
        // Aggiornamento dei boid assegnati
        for (Boid boid : assignedBoids) {
            int index = model.getBoidIndex(boid);
            boid.updateState(model);
            model.updateBoid(index, boid);  // Qui viene acquisito il lock, aggiornato e viene chiamato isUpdated.signalAll()
        }
        
        // Sincronizzazione: aspetta che tutti abbiano finito
        barrier.await();
        Thread.sleep(5);
    }
}

// Thread di Rendering/Coordinamento
new Thread(() -> {
    while (true) {
        try {
            model.waitForUpdate(); // Attende una notifica (bloccandosi) finché un worker non chiama signalAll()
            view.update(frameRate); // Rendering del modello aggiornato
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}).start();
```

### Perché le prestazioni migliorano con condition.await()

- **Senza condition.await():**  
  Se usi solamente un polling (es. controllare continuamente una variabile oppure usare sleep brevi), i thread rimangono attivi controllando continuamente lo stato, consumando cicli CPU anche se non c'è stato alcun cambiamento nel modello.

- **Con condition.await():**  
  Il thread che chiama `await()` viene messo in attesa dal sistema operativo, liberando la CPU. Non consuma risorse perché, fino a quando non viene segnalato, è bloccato in maniera efficiente.  
  Inoltre, quando i worker aggiornano il modello, chiamando `signalAll()` svegliano immediatamente il thread di rendering, che può procedere senza ritardi dovuti a ulteriori polling.

Questo approccio riduce l'uso della CPU perché:
- I thread in attesa **non eseguono cicli di polling** attivi.
- Il risveglio avviene solo quando c'è veramente un aggiornamento nel modello.

### Riassunto

Con l'uso combinato di:
- **Lock** per la mutua esclusione durante l'accesso e la modifica dello stato.
- **Condition (await/signalAll)** per bloccare efficientemente un thread in attesa degli aggiornamenti.
- **CyclicBarrier** per far sincronizzare i 3 worker e garantire che nessun thread proceda al ciclo successivo finché tutti non hanno completato gli aggiornamenti.

si ottiene un sistema in cui ogni componente fa solo il suo lavoro e i thread che devono attendere non consumano inutilmente risorse CPU, 
portando a prestazioni complessivamente migliori e a una gestione più robusta della concorrenza.





/TASK/BASED


1. Inizializzazione
Costruttore di BoidsSimulator
Riceve un'istanza di BoidModel (contenente la lista dei boid e i metodi sincronizzati per l'aggiornamento).
Inizializza la variabile view come Optional vuoto.
Crea un list di Future (per tenere traccia dei task sottomessi).
Crea un pool di thread fisso tramite Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()) 
per sfruttare il parallelismo in base ai core disponibili.

2. Loop Principale (runSimulation)
Il metodo runSimulation() è il cuore della simulazione e gestisce il ciclo infinito:

Controllo della Pausa

All'inizio del ciclo viene controllato il flag paused.
Se la simulazione è in pausa, il thread dorme per 100 ms e continua il ciclo senza eseguire aggiornamenti.
Fase di Aggiornamento dei Boid

Viene invocato model.getBoids() per ottenere una copia della lista dei boid in modo thread-safe.
Si calcola il numero di processori disponibili e il batchSize (numero di boid per task) con:
Viene divisa la lista dei boid in sotto-liste (batch) per ogni processore.
Per ogni batch, viene sottomesso all'Executor un task (ottenuto tramite una lambda) che:
Per ogni boid nel batch:
Chiama boid.updateState(model) per aggiornare lo stato del boid (ad esempio, posizioni e velocità) in base al modello.
Usa model.getBoidIndex(boid) per ottenere la posizione corrente del boid nella lista.
Aggiorna il boid nel modello con model.updateBoid(index, boid), il quale gestisce la sincronizzazione (attraverso lock/condition) e invia un segnale se previsto.
Ogni task sottomesso restituisce un Future, che viene memorizzato in una lista per la sincronizzazione.

Attesa del Completamento dei Task

Dopo aver sottomesso tutti i task, il ciclo attende il completamento di ogni task chiamando future.get() per ogni Future presente nella lista.
Questo garantisce che tutti gli aggiornamenti siano completati prima di procedere al rendering.
Fase di Rendering

Una volta completati gli aggiornamenti, viene controllato se esiste una vista attaccata (Optional contiene un valore).
Viene misurato il tempo impiegato per aggiornare la vista tramite view.get().update(framerate).
Calcola il tempo residuo da dormire in modo da mantenere un frame rate costante (ad es. 30 fps):
Se il tempo impiegato è inferiore al periodo atteso (1000 ms / FRAMERATE), il thread dorme per la differenza.
Il valore del frame rate viene aggiornato in base al tempo di rendering.





Riepilogo: Implementazione del Reset nella Simulazione Boids
Abbiamo implementato un sistema completo di reset della simulazione di boids usando un approccio multi-thread. Ecco i dettagli tecnici e il flusso di esecuzione:

Componenti principali modificati
Bottone Reset nella UI: Aggiunto nella classe BoidsView con la logica necessaria per fermare la simulazione, chiedere il nuovo numero di boids, resettare il modello e riavviare la simulazione.

Gestione dei Worker Thread: Modificata la creazione e la gestione dei thread worker in BoidsSimulator per garantire un avvio e un arresto puliti.

Reset del Modello: Implementato il metodo resetWithNewBoids() in BoidModel per reinizializzare i boid con un nuovo numero specificato.

Flusso di esecuzione
Prima esecuzione
Il metodo main() in BoidsSimulation chiede il numero di boid all'utente
Crea il BoidModel con i parametri iniziali
Crea il BoidsSimulator con il modello
Crea la BoidsView e la associa al simulatore
Chiama sim.start() che:
Crea una nuova CyclicBarrier
Crea i worker thread e assegna loro sottoinsiemi di boids
Avvia tutti i worker
Avvia il thread principale di simulazione
Reset (quando si preme il bottone)
Chiama simulator.stop() che:

Imposta running = false per interrompere il ciclo principale
Interrompe il thread principale di simulazione
Resetta la barriera (importante per evitare BrokenBarrierException)
Interrompe tutti i worker thread
Attende che i worker terminino e svuota la lista
Richiede all'utente il nuovo numero di boid

Esegue model.resetWithNewBoids(nBoids) che:

Pulisce la lista esistente di boid
Ricrea i boid con il nuovo numero richiesto
Mantiene i parametri comportamentali (separazione, allineamento, coesione)
Notifica eventuali thread in attesa
Chiama simulator.start() per riavviare la simulazione:

Crea una nuova barriera
Crea nuovi worker
Avvia tutti i worker
Avvia un nuovo thread di simulazione principale
Problemi risolti
Doppia inizializzazione della barriera: Abbiamo rimosso la creazione della barriera dal costruttore, lasciandola solo nel metodo start().

Riferimenti non validi ai boid: Abbiamo modificato assignBoidsToWorkers() per creare copie della lista dei boid invece di usare viste sulla lista originale.

Gestione delle eccezioni: Abbiamo aggiunto controlli per gestire correttamente le eccezioni BrokenBarrierException durante lo stop.

Coerenza tra primo avvio e reset: Abbiamo assicurato che il comportamento dei boid sia coerente tra prima esecuzione e reset successivi.

Questa implementazione permette un reset pulito della simulazione, con la possibilità di cambiare il numero di boid, mantenendo l'integrità della simulazione e garantendo un'esperienza utente fluida.



Ecco le principali modifiche che abbiamo implementato per supportare il reset nella versione task-based:

BoidsSimulator (Task-based):

Rimosso gli attributi static da executor e paused per evitare problemi con istanze multiple
Aggiunto simulationThread per tenere traccia del thread principale di simulazione
Implementato controllo running per gestire il ciclo di vita della simulazione
Migliorato il metodo stop() per terminare correttamente l'executor service con timeout
Creato un vero metodo start() che inizializza l'executor e avvia il thread di simulazione
Aggiunto controlli di interruzione nel ciclo runSimulation()
BoidTask:

Modificato il costruttore per creare una copia indipendente della lista di boid assegnati
Aggiunto controlli di simulator.isRunning() in punti strategici per terminare in caso di reset
Implementato controllo dell'indice del boid per gestire eventuali boid rimossi durante il reset
TaskBoidsSimulation:

Aggiornato il main() per chiamare sim.start() invece di sim.runSimulation()
Questi cambiamenti hanno permesso di rendere l'approccio task-based completamente compatibile con la funzionalità di reset già implementata nella view, consentendo di:

Interrompere in modo pulito tutti i task in esecuzione
Liberare le risorse dell'executor service
Ricreare un nuovo executor quando necessario
Gestire correttamente le eccezioni e prevenire i riferimenti a boid non più esistenti
L'implementazione è ora più robusta e supporta operazioni di reset senza crash o memory leak.


Riepilogo dell'Implementazione con Virtual Threads
Concetto di Base
L'approccio Virtual Thread implementa un modello "un thread per ogni boid", sfruttando i nuovi thread leggeri di Java 21+ che consentono di creare migliaia di thread con overhead minimo. Questa architettura offre la massima parallelizzazione possibile, con un thread dedicato ad ogni singola entità.

Componenti Principali
BoidsSimulator: Controller principale che implementa l'interfaccia Simulator
VirtualBoid: Classe Runnable che gestisce l'aggiornamento di un singolo boid
ExecutorService: Utilizza Executors.newVirtualThreadPerTaskExecutor() per creare virtual thread
CyclicBarrier: Meccanismo di sincronizzazione tra tutti i thread
Sincronizzazione
Il cuore della sincronizzazione è la CyclicBarrier, un meccanismo che:

Viene inizializzato con N+1 parti (N boid + thread principale)
Fa attendere ogni thread finché tutti raggiungono un punto specifico del codice
Quando tutti i thread hanno chiamato barrier.await(), tutti vengono rilasciati simultaneamente
Garantisce che l'aggiornamento dei boid e il rendering avvengano in fasi sincronizzate


Flusso di Esecuzione Dettagliato
1. Inizializzazione
VirtualSimulation.main() → crea BoidModel → crea BoidsSimulator → crea BoidsView → sim.start()
2. Avvio (BoidsSimulator.start())
Crea una barriera ciclica con dimensione (numBoid + 1)
Crea un executor per virtual thread
Per ogni boid:
Crea un virtual thread che esegue un'istanza di VirtualBoid
Sottomette il thread all'executor
Avvia il thread principale di simulazione

3. Ciclo di ogni Virtual Thread (VirtualBoid.run())
    aggiorna stato del boid
mentre (non interrotto) {
    se (simulazione in pausa) attendi
    aggiorna stato del boid
    aggiorna il boid nel modello
    attendi alla barriera (sincronizzazione)
}

4. Ciclo del Thread Principale (runSimulation())
mentre (running) {
    se (pausa) attendi e continua
    attendi alla barriera (sincronizzazione con tutti i virtual thread)
    esegui rendering
    controlla framerate
}
5. Reset o Stop
Imposta running = false
Resetta la barriera per evitare deadlock
Chiude l'executor
Interrompe tutti i thread